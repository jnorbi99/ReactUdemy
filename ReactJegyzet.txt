React jegyzet Udemy:

Változók:

	- Változó megadásnál "var" helyett "let" és "const".
	- A "const" a jobb, mivel nem írható felül az értéke, 
		ha esetleg mégis ezt tenném hibát dob, könnyyebb megtalálni.

Arrow Function:

	- Rövidebb mint a rendes függvény, egyszerűbben lehet fele foglamazni.
	- PL: 

		const myfunc = num => num * 2;

		- Mindíg "const" kulcsszót használok.
		- Ha nincs paraméter, üres zárójel --> ().
		- Ha egy paraméter van, elhagyható a zárójel.
		- Ha több paraméter van, kell a zárójel. 

Export & Import:

	- Két féle export van:

		export default name; (fájl neve) --> import "bármiNév" from '\name.js';

		export const baseDate = 10; --> import {data} from '\name.js';
										import {data as Data} from ..;
										import * as Data from ..;

	- Tudunk éréket és függvény is exportálni, ebben az esetben a felső 
		szabályokat kell használni.
	- Ha default exportot csinálunk, bárhogy elnevezhetjük és úgy használhatjuk
		tovább.

Class:

	- Az objektumok tervrajza.
	- Tartalmaz propertyket és metódusokat.
	- Declarálás a konstruktoron keresztül.
	- Öröklődés az "extends" kulcsszóval.
	- Ha van öröklődés, a "super()" szülő konstruktort is meg kell hívni,
		a gyerek konstruktorában.
	- Példányosítással válnak tényleges objektummá.

	- PL.:

		class Human {
			constructor() {
				this.gender = 'male'
			}

			printGender() {
				console.log(this.gender);
			}
		}

		class Person extends Human {
			constructor() {
				super();
				this.name = "max";
				this.gender = "female";
			}
		}

ES7 JavaScript:
	
	- this.propertyName = "value" | helyett | propertyName = "value" 
		+ nincs constructor(), direktbe van megadva.
	- myMethod () {...} | helyett | ArrowFunction

Spread & Rest operators (...) :

	- Jelölése "...".
	- Spread:
		array illetve objektumok összefésülésére használják:

			const newArray = [...oldArray, 5, 6];
				-minden elemet kivesz a régi "oldArray"-ból.
				- Ha csak [oldArray, 1, 2]; --> [[x, y], 1, 2]
				- Ha [...oldArray, 1, 2]; --> [x, y, 1, 2]

			const newObject = {...oldObject, newProperty: 5}
				-lemásoltam a régi objektumot, és hozzáadtam egy új propertyt.

	- Rest:
		az összes paramétert egy array.ként tárolja el nekünk

			const filter = (...args) => agrs.filter();

			-nincs előre megadva a paraméter szám.

Destruktúrálás (Destructuring):

	- Array PL.:

		const numbers = [1, 2, 3];
		[num1, , num3] = numbers;
		console.log(num1, num3); // 1, 3
	
	- Object PL.:

		{name} = {name: "max", age: 28}
		console.log(name); // max
		console.log(age); // undefined

Referencia és primitív típusok:

	- Spread-ot kell használni akkor, ha egy objektumot másolni akarok,	
		értékekkel együtt, és nem csak referenciaként akarok mutatni,
		a memóriacimére.

	- PL.:

		const person {
			name = "max";
		}

		const otherPerson {
			...person;                 !!!
		}

Array functions:

	const numbers = [1, 2, 3]; // [1, 2, 3]

	- Minden szám duplájával akarok visszatrni --> .map() használata, 
		minden egyes elemre elvégzi a feltételt.

	const doubleArray = numbers.map((num) = > { // [2, 4, 6]
		return num * 2;
	});


React project létrehozása:

	1. Node Js --> latest version
	2. npx create-react-app "name"
	3. cd "name"
	4. npm start ! 

	5. Ha letöltött verziót használsz, (mivel nincsenek feltöltve a node_module-ok) --> npm install --> npm start 

Createing a Component:

	The react component is a Javascript function. 
	So you need to define a function with the same name of the containing js file. The file name, the function name, and each subword are begin a capital letter.
	The function includes a return state, where you can define the JSX code. 

	Then you need export the function, because you want to use it in the other file. 

		export default "function name"

	In the file, where you want to use this compontent, you have to import at first. 

		import "CompName" from "path";

	After it, you can refer with the compName attribute. You have to use this syntax:

		<CompName></CompName>

	If you dont need that, you could use the self closing tag:

		<CompName />


CSS inserting:

	If you want to create or import a css file, you need to do this:

		import "path";

	Then, you have to use the "className" keyword. 
	You can find the value of the className in the css file.

Dynamic data outputting instead of hardcodeing:

	You do this method, because you want to write reuseable codes. Store the values in variables and then you can refer with this:

		const vari = 289;

		<h2>{vari}</h2>

	If you want to outputting an object, you need to use the .toISOString() function.

Props:

	The React parameters called props. With props, you can pass data between components. The HTML tags can have attributes. Then our custom components can also have attributes too. You need to use only one parameter in the function.

		function Something(props) {};

	Then you can refer with this:

		<h2>{props.attributeName}</h2>

	When you use the component, you have to define this:

		<Something
			title="xy"
			amount={list[0].amount}
		></Something>

9.

Fragment:

	The Fragment is a wrapping component, you can use that instead of wrapper component, ot the wrapper <div>

Portals:

	We use it at the ErrorModal. When you want to render this ErrodModal, outside of the other components, you need to set a destination (index.js/in body), and you can render it somewhere else, regardless where you wrote it.

Refs:

	We use Refs, when we read some input from the user. When you dont want to change these values, you dont need to use the States. The Refs are shorter, and you can manipulate it directly. It is more useful, than you use States. The Refs are do not controlled by the React, we use the regular dom API, for setting the value.

Uncontrolled vs Controller Components:

	In a component, where we have input fields, and we read some values from the user --> If we log every keystroke, and save the value to the state, and we feed back to the user --> it is a Controller Component. The Data is handeled by React.

	If we use Refs, in this situation --> it is an Uncontrolled Component. The data is handeled by DOM.


10. 

Effects:

	When you want to use something in the background, what is not for the user, you need the use (Side)Effects.
	It has 2 argument:
	
	useEffect(func,[dependencie]);

	The function in the useEffect method, always rerun, when the dependencie value is changed.

	In general we use it with props and states.

Reducers:

	We use the reducers if we have a lot of state, and if the some state have a connection. For example, when you log the userinput, and you want to validate it. In general we use 2 useState here. Instead this we can use 1 useReducer. It is more powerful than useState, but it is not necessary always.
	The build up is here:

	const [nameState, dispastchProp] = useReducer(triggeredFunc,
	initialdata);

	the dispatch will trigger the trigger func, where you can update your state properties. The 'nameState' has more than one property. The Reducer is an overdosed form of useState.

Context API:

	If you want to avoid the prop chain (if you use some state, in some component, and then you want to use it somewhere else, you need to lift the state up. When the project are big, the lifting up is so long, and the state go through of so many component. These components are dont want to use it.). Instead this example, we can use a storage. You can change the stored value as a Provider, and you can use the value as a Consumer. You need to wrap the jsx, where you want to use it.

		1. You need to define the Context.
		2. You have to know, where you want to use it. 
		3. In the component, where you want to change the value, use the --> 

			<MyContext.Provider value={{
				myProp: someState
			}}>
				"OTHER JSX CODES"
			</MyContext.Provider>

		4. in the component, where you want to use the value -->

			<MyContext.Consumer>
			{(ctx) => {
				"OTHER JSX CODE"
				ctx.myProp <-- the using
			}}
			</MyContext.Consumer>

			More elegant way to use ContextHook, instead the 4. {(ctx) => ...}

			const ctx = useContext(MyContext); <-- in the listener component

	When your child component use directly his parents states or functions, you dont need to do this Hook!!!

	The Context are not opztimized when youre state upadted every second. When you use to login logout, it is ok.
